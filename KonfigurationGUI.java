/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package agri.pv_shadow_sim_java;

import java.awt.Color;
import java.awt.Graphics2D;
import java.util.ArrayList;
import org.locationtech.jts.geom.*;

/**
 *
 * @author roesc
 */
public class KonfigurationGUI extends javax.swing.JFrame {
    
    private AgriPVData data = new AgriPVData();
    private AgriPVModulTyp[] PVKTypen;
    private SimulationsGUI sGUI;
    

    /**
     * Creates new form KonfigurationGUI
     */
    public KonfigurationGUI() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpnlFlurstueck = new javax.swing.JPanel();
        jbtnFlurstueckAuswahl = new javax.swing.JButton();
        jpnlFlurstueckPolygon = new GeometryPanel();
        jlblGemeinde = new javax.swing.JLabel();
        jlblGemeindeText = new javax.swing.JLabel();
        jlblFlurstuecknenner = new javax.swing.JLabel();
        jlblFlurstuecknennerText = new javax.swing.JLabel();
        jlblFlurstueckzahler = new javax.swing.JLabel();
        jlblFlurstueckzahlerText = new javax.swing.JLabel();
        jpnlPVK = new javax.swing.JPanel();
        jlblPVKT = new javax.swing.JLabel();
        jlblPVKType = new javax.swing.JLabel();
        jcmbbxPVKTypen = new javax.swing.JComboBox<>();
        jlblPVKAusrichtung = new javax.swing.JLabel();
        jcmbbxPVKAusrichtung = new javax.swing.JComboBox<>();
        jlblPVKReihenabs = new javax.swing.JLabel();
        jlblPVKRand = new javax.swing.JLabel();
        jtxtfldPVKReihenabstand = new javax.swing.JTextField();
        jtxtfldPVKRand = new javax.swing.JTextField();
        jpnlUGK = new javax.swing.JPanel();
        jlblUGKT = new javax.swing.JLabel();
        jlblUGKEigenschaften = new javax.swing.JLabel();
        jchckbxTransparenz = new javax.swing.JCheckBox();
        jchckbxReflextion = new javax.swing.JCheckBox();
        jtxtfldTransparenz = new javax.swing.JTextField();
        jtxtfldReflextion = new javax.swing.JTextField();
        jlblUGKGitternetz = new javax.swing.JLabel();
        jtxtfldGitternetz = new javax.swing.JTextField();
        jlblUGKZeitspanne = new javax.swing.JLabel();
        jlblUGKIntervall = new javax.swing.JLabel();
        jtxtfldUGKIntervallgenuigkeit = new javax.swing.JTextField();
        jcmbbxUGKZeitspanne = new javax.swing.JComboBox<>();
        jlblUGKVisualisierung = new javax.swing.JLabel();
        jchckbxUGKLog = new javax.swing.JCheckBox();
        jcmbbxUGKStartmonat = new javax.swing.JComboBox<>();
        jlblUGKStartmonat = new javax.swing.JLabel();
        jpnlKGD = new javax.swing.JPanel();
        jbtnKDImport = new javax.swing.JButton();
        jlblKonfigurationsdatei = new javax.swing.JLabel();
        jbtnKDExport = new javax.swing.JButton();
        jpnlSteuerung = new javax.swing.JPanel();
        jprgrsbrRunning = new javax.swing.JProgressBar();
        jbtnAbbrechen = new javax.swing.JButton();
        jbtnSimulationStarten = new javax.swing.JButton();
        jlblProgressText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulationseinstellungen");

        jbtnFlurstueckAuswahl.setText("Flurstück auswählen");
        jbtnFlurstueckAuswahl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnFlurstueckAuswahlActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnlFlurstueckPolygonLayout = new javax.swing.GroupLayout(jpnlFlurstueckPolygon);
        jpnlFlurstueckPolygon.setLayout(jpnlFlurstueckPolygonLayout);
        jpnlFlurstueckPolygonLayout.setHorizontalGroup(
            jpnlFlurstueckPolygonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpnlFlurstueckPolygonLayout.setVerticalGroup(
            jpnlFlurstueckPolygonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jlblGemeinde.setText("Gemeinde:");

        jlblGemeindeText.setText(" ");

        jlblFlurstuecknenner.setText("Flurstücknenner:");

        jlblFlurstuecknennerText.setText(" ");

        jlblFlurstueckzahler.setText("Flurstückzähler:");

        jlblFlurstueckzahlerText.setText(" ");

        javax.swing.GroupLayout jpnlFlurstueckLayout = new javax.swing.GroupLayout(jpnlFlurstueck);
        jpnlFlurstueck.setLayout(jpnlFlurstueckLayout);
        jpnlFlurstueckLayout.setHorizontalGroup(
            jpnlFlurstueckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlFlurstueckLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlFlurstueckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbtnFlurstueckAuswahl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlblGemeinde, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlblGemeindeText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlblFlurstueckzahler, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlblFlurstueckzahlerText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlblFlurstuecknenner, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlblFlurstuecknennerText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jpnlFlurstueckPolygon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpnlFlurstueckLayout.setVerticalGroup(
            jpnlFlurstueckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlFlurstueckLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlFlurstueckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpnlFlurstueckPolygon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpnlFlurstueckLayout.createSequentialGroup()
                        .addComponent(jbtnFlurstueckAuswahl)
                        .addGap(18, 18, 18)
                        .addComponent(jlblGemeinde)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlblGemeindeText)
                        .addGap(18, 18, 18)
                        .addComponent(jlblFlurstueckzahler)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlblFlurstueckzahlerText)
                        .addGap(18, 18, 18)
                        .addComponent(jlblFlurstuecknenner)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlblFlurstuecknennerText)
                        .addGap(0, 44, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jlblPVKT.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jlblPVKT.setText("PV-Konfiguration:");

        jlblPVKType.setText("PV-Typen");

        jcmbbxPVKTypen.setToolTipText("");

        jlblPVKAusrichtung.setText("PV Ausrichtung");

        jcmbbxPVKAusrichtung.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nord-Süd", "Ost-West" }));

        jlblPVKReihenabs.setText("Reihenabstand");

        jlblPVKRand.setText("Rand zur Grundstücksgrenze");

        jtxtfldPVKReihenabstand.setText("10");

        jtxtfldPVKRand.setText("0.4");

        javax.swing.GroupLayout jpnlPVKLayout = new javax.swing.GroupLayout(jpnlPVK);
        jpnlPVK.setLayout(jpnlPVKLayout);
        jpnlPVKLayout.setHorizontalGroup(
            jpnlPVKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlPVKLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlPVKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblPVKT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlblPVKType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcmbbxPVKTypen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlblPVKAusrichtung, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcmbbxPVKAusrichtung, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpnlPVKLayout.createSequentialGroup()
                        .addGroup(jpnlPVKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlblPVKReihenabs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlblPVKRand, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnlPVKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtxtfldPVKRand, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                            .addComponent(jtxtfldPVKReihenabstand))))
                .addContainerGap())
        );
        jpnlPVKLayout.setVerticalGroup(
            jpnlPVKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlPVKLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblPVKT)
                .addGap(18, 18, 18)
                .addComponent(jlblPVKType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcmbbxPVKTypen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlblPVKAusrichtung)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcmbbxPVKAusrichtung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jpnlPVKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblPVKReihenabs)
                    .addComponent(jtxtfldPVKReihenabstand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlPVKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtxtfldPVKRand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblPVKRand))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jlblUGKT.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jlblUGKT.setText("Umgebungskonfiguration:");

        jlblUGKEigenschaften.setText("Zusätzliche Eigenschaften:");

        jchckbxTransparenz.setText("Diffuse Komponente");

        jchckbxReflextion.setText("Wetterdaten-Integration");

        jtxtfldTransparenz.setText("50%");

        jtxtfldReflextion.setText("Nein");

        jlblUGKGitternetz.setText("Gitternetzauflösung");

        jtxtfldGitternetz.setText("1m");

        jlblUGKZeitspanne.setText("Zeitspanne:");

        jlblUGKIntervall.setText("Intervallgenauigkeit (min)");

        jtxtfldUGKIntervallgenuigkeit.setText("1");

        jcmbbxUGKZeitspanne.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 Jahr", "9 Monate", "6 Monate", "3 Monate", "1 Monat" }));

        jlblUGKVisualisierung.setText("Visualisierung:");

        jchckbxUGKLog.setText("Logarithmisch");

        jcmbbxUGKStartmonat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember" }));

        jlblUGKStartmonat.setText("Startmonat:");

        javax.swing.GroupLayout jpnlUGKLayout = new javax.swing.GroupLayout(jpnlUGK);
        jpnlUGK.setLayout(jpnlUGKLayout);
        jpnlUGKLayout.setHorizontalGroup(
            jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlUGKLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblUGKT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlblUGKEigenschaften, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpnlUGKLayout.createSequentialGroup()
                        .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jchckbxTransparenz, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jchckbxReflextion, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtxtfldTransparenz, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                            .addComponent(jtxtfldReflextion)))
                    .addComponent(jlblUGKVisualisierung, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jpnlUGKLayout.createSequentialGroup()
                        .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jpnlUGKLayout.createSequentialGroup()
                                    .addComponent(jlblUGKIntervall, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jtxtfldUGKIntervallgenuigkeit, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jpnlUGKLayout.createSequentialGroup()
                                    .addComponent(jcmbbxUGKZeitspanne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jcmbbxUGKStartmonat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jchckbxUGKLog)
                            .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jlblUGKStartmonat, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jpnlUGKLayout.createSequentialGroup()
                                    .addComponent(jlblUGKGitternetz, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jtxtfldGitternetz, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jlblUGKZeitspanne, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpnlUGKLayout.setVerticalGroup(
            jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlUGKLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblUGKT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblUGKGitternetz)
                    .addComponent(jtxtfldGitternetz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblUGKZeitspanne)
                    .addComponent(jlblUGKStartmonat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcmbbxUGKZeitspanne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcmbbxUGKStartmonat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblUGKIntervall)
                    .addComponent(jtxtfldUGKIntervallgenuigkeit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jlblUGKVisualisierung)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jchckbxUGKLog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlblUGKEigenschaften)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jchckbxTransparenz)
                    .addComponent(jtxtfldTransparenz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlUGKLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jchckbxReflextion)
                    .addComponent(jtxtfldReflextion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jbtnKDImport.setText("Importieren");

        jlblKonfigurationsdatei.setText("Konfigurationsdatei:");

        jbtnKDExport.setText("Exportieren");

        javax.swing.GroupLayout jpnlKGDLayout = new javax.swing.GroupLayout(jpnlKGD);
        jpnlKGD.setLayout(jpnlKGDLayout);
        jpnlKGDLayout.setHorizontalGroup(
            jpnlKGDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlblKonfigurationsdatei, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jpnlKGDLayout.createSequentialGroup()
                .addComponent(jbtnKDImport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtnKDExport)
                .addContainerGap())
        );
        jpnlKGDLayout.setVerticalGroup(
            jpnlKGDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnlKGDLayout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(jlblKonfigurationsdatei)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlKGDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnKDImport)
                    .addComponent(jbtnKDExport))
                .addContainerGap())
        );

        jprgrsbrRunning.setToolTipText("");
        jprgrsbrRunning.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jbtnAbbrechen.setText("Abbrechen");
        jbtnAbbrechen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAbbrechenActionPerformed(evt);
            }
        });

        jbtnSimulationStarten.setText("Simulation Starten");
        jbtnSimulationStarten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSimulationStartenActionPerformed(evt);
            }
        });

        jlblProgressText.setText(" ");

        javax.swing.GroupLayout jpnlSteuerungLayout = new javax.swing.GroupLayout(jpnlSteuerung);
        jpnlSteuerung.setLayout(jpnlSteuerungLayout);
        jpnlSteuerungLayout.setHorizontalGroup(
            jpnlSteuerungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlSteuerungLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblProgressText, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtnAbbrechen)
                .addGap(18, 18, 18)
                .addComponent(jbtnSimulationStarten)
                .addContainerGap())
            .addComponent(jprgrsbrRunning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jpnlSteuerungLayout.setVerticalGroup(
            jpnlSteuerungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlSteuerungLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlSteuerungLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnSimulationStarten)
                    .addComponent(jbtnAbbrechen)
                    .addComponent(jlblProgressText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jprgrsbrRunning, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpnlSteuerung, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jpnlFlurstueck, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jpnlKGD, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jpnlPVK, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(17, 17, 17)
                            .addComponent(jpnlUGK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpnlFlurstueck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpnlPVK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpnlKGD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jpnlUGK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpnlSteuerung, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void init(){
        this.PVKTypen = new AgriPVModulTyp[]{new AgriPVModulTyp(2.1256,2.217,2.1256,0.1,0.8076,90,false,"Fest vertikale PV (Kategorie II)")}; // Initalisierung aller PV Model Typen
        for(AgriPVModulTyp tmp: this.PVKTypen){
            jcmbbxPVKTypen.addItem(tmp);
        }
        jcmbbxPVKTypen.setSelectedIndex(0);
        
        this.sGUI = new SimulationsGUI();
        sGUI.setAgriPVData(data);
        sGUI.setVisible(false);
        
        ((GeometryPanel)jpnlFlurstueckPolygon).setAgriPVData(data);
    }
    
    private void jbtnFlurstueckAuswahlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnFlurstueckAuswahlActionPerformed
        FlurstueckEingabeGUI fegui = new FlurstueckEingabeGUI(data, this);
        fegui.setVisible(true);
    }//GEN-LAST:event_jbtnFlurstueckAuswahlActionPerformed

    private void jbtnAbbrechenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAbbrechenActionPerformed
        this.dispose();
        sGUI.dispose();
    }//GEN-LAST:event_jbtnAbbrechenActionPerformed

    private void jbtnSimulationStartenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSimulationStartenActionPerformed
        jprgrsbrRunning.setIndeterminate(true);
        sGUI.clearAll();
        if(data.plotPolygon != null || !data.plotPolygon.isEmpty()){
            placeModules(data.plotPolygon);
            sGUI.addGeometry(data.plotPolygon, Color.BLACK);
            sGUI.setVisible(true);
        }
    }//GEN-LAST:event_jbtnSimulationStartenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KonfigurationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KonfigurationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KonfigurationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KonfigurationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KonfigurationGUI().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbtnAbbrechen;
    private javax.swing.JButton jbtnFlurstueckAuswahl;
    private javax.swing.JButton jbtnKDExport;
    private javax.swing.JButton jbtnKDImport;
    private javax.swing.JButton jbtnSimulationStarten;
    private javax.swing.JCheckBox jchckbxReflextion;
    private javax.swing.JCheckBox jchckbxTransparenz;
    private javax.swing.JCheckBox jchckbxUGKLog;
    private javax.swing.JComboBox<String> jcmbbxPVKAusrichtung;
    private javax.swing.JComboBox<AgriPVModulTyp> jcmbbxPVKTypen;
    private javax.swing.JComboBox<String> jcmbbxUGKStartmonat;
    private javax.swing.JComboBox<String> jcmbbxUGKZeitspanne;
    private javax.swing.JLabel jlblFlurstuecknenner;
    private javax.swing.JLabel jlblFlurstuecknennerText;
    private javax.swing.JLabel jlblFlurstueckzahler;
    private javax.swing.JLabel jlblFlurstueckzahlerText;
    private javax.swing.JLabel jlblGemeinde;
    private javax.swing.JLabel jlblGemeindeText;
    private javax.swing.JLabel jlblKonfigurationsdatei;
    private javax.swing.JLabel jlblPVKAusrichtung;
    private javax.swing.JLabel jlblPVKRand;
    private javax.swing.JLabel jlblPVKReihenabs;
    private javax.swing.JLabel jlblPVKT;
    private javax.swing.JLabel jlblPVKType;
    private javax.swing.JLabel jlblProgressText;
    private javax.swing.JLabel jlblUGKEigenschaften;
    private javax.swing.JLabel jlblUGKGitternetz;
    private javax.swing.JLabel jlblUGKIntervall;
    private javax.swing.JLabel jlblUGKStartmonat;
    private javax.swing.JLabel jlblUGKT;
    private javax.swing.JLabel jlblUGKVisualisierung;
    private javax.swing.JLabel jlblUGKZeitspanne;
    private javax.swing.JPanel jpnlFlurstueck;
    private javax.swing.JPanel jpnlFlurstueckPolygon;
    private javax.swing.JPanel jpnlKGD;
    private javax.swing.JPanel jpnlPVK;
    private javax.swing.JPanel jpnlSteuerung;
    private javax.swing.JPanel jpnlUGK;
    private javax.swing.JProgressBar jprgrsbrRunning;
    private javax.swing.JTextField jtxtfldGitternetz;
    private javax.swing.JTextField jtxtfldPVKRand;
    private javax.swing.JTextField jtxtfldPVKReihenabstand;
    private javax.swing.JTextField jtxtfldReflextion;
    private javax.swing.JTextField jtxtfldTransparenz;
    private javax.swing.JTextField jtxtfldUGKIntervallgenuigkeit;
    // End of variables declaration//GEN-END:variables

    protected void flurstuckAusgewahlt(){
//        setPolygon();
        ((GeometryPanel)jpnlFlurstueckPolygon).addGeometry(data.plotPolygon, Color.BLACK);
        jlblGemeindeText.setText(data.gemeindename);
        jlblFlurstuecknennerText.setText(data.flurstuecksnenner + "");
        jlblFlurstueckzahlerText.setText(data.flurstueckszaehler + "");
    }
    
    
//    protected void setPolygon(){
//        double scaleN = ((jpnlFlurstueckPolygon.getHeight()-10.0) / (data.maxn - data.minn));
//        double scaleE = ((jpnlFlurstueckPolygon.getWidth()-10.0) / (data.maxe - data.mine));
////        System.out.println((jpnlFlurstueckPolygon.getHeight()-10) + " / (" + (data.maxn - data.minn) + ") - 0.1");
////        System.out.println((jpnlFlurstueckPolygon.getWidth()-10) + " / (" + (data.maxe - data.mine) + ") - 0.1");
////        System.out.println("Scale: N" + scaleN + " E" + scaleE);
//        if(scaleN < scaleE){
//            scaleE = scaleN;
//        }
//        
//        int[] x, y; // Bildschirm-Koordinaten
//        // Koordinaten umrechnen (z. B. skalieren + invertieren für Anzeige)
//        x = new int[data.points];
//        y = new int[data.points];
//        
//        int panelHight = jpnlFlurstueckPolygon.getHeight();
//        int panelWidth = jpnlFlurstueckPolygon.getWidth();
//        
//        for (int i = 0; i < data.points; i++) {
//            x[i] = (int) ((panelWidth/2) + (data.grundstuecksgrenze[0][i] - ((data.mine + data.maxe)/2)) * scaleE); // relativ
//            y[i] = (int) ((panelHight/2) - (data.grundstuecksgrenze[1][i] - ((data.minn + data.maxn)/2)) * scaleE); // y-Achse umdrehen
////            System.out.println("Scal. x" + x[i] + " y" + y[i]);
////            System.out.println("E (" + (data.grundstuecksgrenze[0][i]-data.mine) + "," + (data.grundstuecksgrenze[1][i]-data.minn) + ") N");
//        }
//        java.awt.Polygon polygon = new java.awt.Polygon(x, y, data.points);
//        Graphics2D g = (Graphics2D) jpnlFlurstueckPolygon.getGraphics();
//        g.drawPolygon(polygon);        
//        
//    }

    public ArrayList<Coordinate> placeModules(Polygon plotPolygon) {
        ArrayList<Coordinate> placedModules = new ArrayList<>();

        double pvx;
        double pvy;
        
        if(jcmbbxPVKAusrichtung.getSelectedIndex() == 0){
            pvx = this.PVKTypen[jcmbbxPVKTypen.getSelectedIndex()].getLndwrtsNchtNtzLange();
            pvy = this.PVKTypen[jcmbbxPVKTypen.getSelectedIndex()].getLndwrtsNchtNtzBreite();
        } else {
            pvx = this.PVKTypen[jcmbbxPVKTypen.getSelectedIndex()].getLndwrtsNchtNtzBreite();
            pvy = this.PVKTypen[jcmbbxPVKTypen.getSelectedIndex()].getLndwrtsNchtNtzLange();
        }
        
        
        Geometry buffered = plotPolygon.buffer(-Double.parseDouble(jtxtfldPVKRand.getText()));
        ArrayList<Polygon> usablePolygons = new ArrayList<>();
        if (buffered instanceof Polygon) {
            usablePolygons.add((Polygon) buffered);
        } else if (buffered instanceof MultiPolygon) {
            MultiPolygon mp = (MultiPolygon) buffered;
            for (int i = 0; i < mp.getNumGeometries(); i++) {
                Geometry g = mp.getGeometryN(i);
                if (g instanceof Polygon) {
                    usablePolygons.add((Polygon) g);
                } else {
                    System.out.println("Fehler");
                }
            }
        } 
        
        GeometryFactory gf = new GeometryFactory();
        
        for (Polygon innerPolygon : usablePolygons) {
            Envelope inBounds = innerPolygon.getEnvelopeInternal();
            
            if(jcmbbxPVKAusrichtung.getSelectedIndex() == 0){
                
                double addy = 0.1;  
                for (double y = inBounds.getMinY(); y <= inBounds.getMaxY() - pvy; y += addy) {
                    
                    double addx = 0.1;              
                    for (double x = inBounds.getMinX(); x <= inBounds.getMaxX() - pvx; x += addx) {
                        
                        Coordinate llCornerCoord = new Coordinate(x, y);
                        Point llCornerPoint = gf.createPoint(llCornerCoord);

                        // Nur wenn Punkt im Polygon liegt, weitermachen
                        if (!innerPolygon.contains(llCornerPoint)) continue;

                        Coordinate lrCornerCoord = new Coordinate(x+pvx, y);
                        Point lrCornerPoint = gf.createPoint(lrCornerCoord);
                        if (!innerPolygon.contains(lrCornerPoint)){
                            x += (pvx-addx);
                            continue;
                        }
                        
                        Polygon module = createModulePolygon(x, y, pvx, pvy);

                        if (innerPolygon.contains(module)) {
                            if (placedModules.isEmpty()){
                                addy = pvy+Double.parseDouble(jtxtfldPVKReihenabstand.getText());
                            }
                            x += (pvx-addx);
                            placedModules.add(new Coordinate(x+(pvx/2), y+(pvy/2)));
                            sGUI.addGeometry(module, Color.BLUE);
                        }
                    }
                }
            } else {
                
                double addx = 0.1;  
                for (double x = inBounds.getMinX(); x <= inBounds.getMaxX() - pvx; x += addx) {
                    
                    double addy = 0.1;              
                    for (double y = inBounds.getMinY(); y <= inBounds.getMaxY() - pvy; y += addy) {
                        
                        Coordinate llCornerCoord = new Coordinate(x, y);
                        Point llCornerPoint = gf.createPoint(llCornerCoord);

                        // Nur wenn Punkt im Polygon liegt, weitermachen
                        if (!innerPolygon.contains(llCornerPoint)) continue;

                        Coordinate ulCornerCoord = new Coordinate(x, y+pvy);
                        Point ulCornerPoint = gf.createPoint(ulCornerCoord);
                        if (!innerPolygon.contains(ulCornerPoint)){
                            y += (pvy-addy);
                            continue;
                        }
                        
                        Polygon module = createModulePolygon(x, y, pvx, pvy);

                        if (innerPolygon.contains(module)) {
                            if (placedModules.isEmpty()){
                                addx = pvx+Double.parseDouble(jtxtfldPVKReihenabstand.getText());
                            }
                            y += (pvy-addy);
                            placedModules.add(new Coordinate(x+(pvx/2), y+(pvy/2)));
                            sGUI.addGeometry(module, Color.BLUE);
                        }
                    }
                }
            }
        }

        return placedModules;
    }

    private static Polygon createModulePolygon(double llX, double llY, double pvx, double pvy) {

        Coordinate[] coords;
        
            coords = new Coordinate[]{
                    new Coordinate(llX, llY),
                    new Coordinate(llX + pvx, llY),
                    new Coordinate(llX + pvx, llY + pvy),
                    new Coordinate(llX, llY + pvy),
                    new Coordinate(llX, llY)
            };
        

        GeometryFactory gf = new GeometryFactory();
        return gf.createPolygon(coords);
    }
    
//    protected void drawGeometry(Graphics2D g, Geometry geometry, Color color, AgriPVData data, int panelWidth, int panelHeight) {
//        double scaleN = ((panelHeight - 10.0) / (data.maxn - data.minn));
//        double scaleE = ((panelWidth - 10.0) / (data.maxe - data.mine));
//        if (scaleN < scaleE) {
//            scaleE = scaleN;
//        }
//        
//        g.setColor(color);
//
//        if (geometry instanceof Polygon) {
//            Polygon poly = (Polygon) geometry;
//            Coordinate[] coords = poly.getExteriorRing().getCoordinates();
//
//            int[] x = new int[coords.length];
//            int[] y = new int[coords.length];
//
//            for (int i = 0; i < coords.length; i++) {
//                x[i] = (int) ((panelWidth / 2.0) + (coords[i].x - (data.mine + data.maxe) / 2.0) * scaleE);
//                y[i] = (int) ((panelHeight / 2.0) - (coords[i].y - (data.minn + data.maxn) / 2.0) * scaleE);
//            }
//
//            g.drawPolygon(x, y, coords.length);
//            System.out.println("");
////            g.fillPolygon(x, y, coords.length); // Optional: auskommentieren wenn nur Kontur
//        }
//
//        else if (geometry instanceof Point) {
//            Coordinate coord = geometry.getCoordinate();
//            int px = (int) ((panelWidth / 2.0) + (coord.x - (data.mine + data.maxe) / 2.0) * scaleE);
//            int py = (int) ((panelHeight / 2.0) - (coord.y - (data.minn + data.maxn) / 2.0) * scaleE);
//            g.fillOval(px - 2, py - 2, 4, 4);
//        }
//    }


}
