/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package agri.pv_shadow_sim_java;


import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.text.NumberFormatter;
import org.json.JSONArray;
import org.json.JSONObject;
import org.locationtech.jts.geom.*;

/**
 * Die Klasse {@code FlurstueckEingabeGUI} repräsentiert das GUI-Fenster zur Eingabe
 * und Auswahl eines Flurstücks. Der Benutzer kann ein Flurstück entweder über
 * seine Nummer (Zähler/Nenner) oder über geografische Koordinaten auswählen.
 * Die Daten werden über eine ALKIS-API abgerufen und im {@code AgriPVData}-Objekt gespeichert.
 *
 * @author roesc
 */
public class FlurstueckEingabeGUI extends javax.swing.JFrame {

    private AgriPVData data; // Das Datenobjekt, das die Flurstücksinformationen speichert
    private KonfigurationGUI kGUI; // Referenz zur KonfigurationGUI, um Updates zu senden
    private ALKISApiClient aAC; // Client für die Kommunikation mit der ALKIS-API
    private NumberFormatter zaehlerFormatter; // Formatter für den Flurstückzähler
    private NumberFormatter gradFormatter; // Formatter für Grad-Werte (Koordinaten)
    private NumberFormatter minFormatter; // Formatter für Minuten-Werte (Koordinaten)
    private NumberFormatter secFormat; // Formatter für Sekunden-Werte (Koordinaten)
    private NumberFormatter utmFormatter; // Formatter für UTM-Koordinaten
    
    /**
     * Erstellt ein neues Formular FlurstueckEingabeGUI.
     * Verwendet Standardinstanzen von AgriPVData und KonfigurationGUI.
     */
    public FlurstueckEingabeGUI() {
        this(new AgriPVData(), new KonfigurationGUI());
    }
    
    /**
     * Erstellt ein neues Formular FlurstueckEingabeGUI mit den gegebenen Datenobjekten.
     *
     * @param data Das {@code AgriPVData}-Objekt, das die Flurstücksinformationen speichern wird.
     * @param kGUI Die Referenz zur {@code KonfigurationGUI}, um Rückmeldungen zu geben.
     */
    public FlurstueckEingabeGUI(AgriPVData data, KonfigurationGUI kGUI){
        this.data = data;
        this.kGUI = kGUI;
        init(); // Initialisiert Formatter und API-Client
        initComponents(); // Initialisiert die Swing-Komponenten
        updateMarkings(); // Aktualisiert die Gemarkungs-Dropdown-Liste
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnUebernehmen = new javax.swing.JButton();
        jbtnAbbrechen = new javax.swing.JButton();
        jtbdpnFlurKoord = new javax.swing.JTabbedPane();
        jpnlFlurstueckEingabe = new javax.swing.JPanel();
        jlblFlurstuecknummer = new javax.swing.JLabel();
        jfrmttxtfldFlurstueckzahler = new javax.swing.JFormattedTextField(zaehlerFormatter);
        jLabel1 = new javax.swing.JLabel();
        jfrmttxtfldFlurstuecknenner = new javax.swing.JFormattedTextField(zaehlerFormatter);
        jtbdpnKoordinatenEingabe = new javax.swing.JTabbedPane();
        jpnlKoordinatenEingabe = new javax.swing.JPanel();
        jtxtfldNGrad = new javax.swing.JFormattedTextField(gradFormatter);
        jlblN1 = new javax.swing.JLabel();
        jtxtfldNMinuten = new javax.swing.JFormattedTextField(minFormatter);
        jlblN2 = new javax.swing.JLabel();
        jtxtfldNSekunden = new javax.swing.JFormattedTextField(secFormat);
        jlblN3 = new javax.swing.JLabel();
        jtxtfldEGrad = new javax.swing.JFormattedTextField(gradFormatter);
        jlblE1 = new javax.swing.JLabel();
        jtxtfldEMinuten = new javax.swing.JFormattedTextField(minFormatter);
        jlblE2 = new javax.swing.JLabel();
        jtxtfldESekunden = new javax.swing.JFormattedTextField(secFormat);
        jlblE3 = new javax.swing.JLabel();
        jpnlETRS89_UTM = new javax.swing.JPanel();
        jtxtfldUTMEasting = new javax.swing.JFormattedTextField(utmFormatter);
        jtxtfldUTMNorthing = new javax.swing.JFormattedTextField(utmFormatter);
        jlblUTMEasting = new javax.swing.JLabel();
        jlblUTMNorthing = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jlblGemeinde = new javax.swing.JLabel();
        jcmbbxGemeinde = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Auswahl des Flurstücks");

        jbtnUebernehmen.setText("Übernehmen");
        jbtnUebernehmen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUebernehmenActionPerformed(evt);
            }
        });
        jbtnUebernehmen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtnUebernehmenKeyPressed(evt);
            }
        });

        jbtnAbbrechen.setText("Abbrechen");
        jbtnAbbrechen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAbbrechenActionPerformed(evt);
            }
        });
        jbtnAbbrechen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jbtnAbbrechenKeyPressed(evt);
            }
        });

        jtbdpnFlurKoord.setForeground(new java.awt.Color(220, 214, 204));

        jlblFlurstuecknummer.setText("Flurstückzähler");

        jfrmttxtfldFlurstueckzahler.setColumns(10);
        jfrmttxtfldFlurstueckzahler.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jfrmttxtfldFlurstueckzahlerKeyPressed(evt);
            }
        });

        jLabel1.setText("Flurstücksnenner");

        jfrmttxtfldFlurstuecknenner.setColumns(10);
        jfrmttxtfldFlurstuecknenner.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jfrmttxtfldFlurstuecknennerKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jpnlFlurstueckEingabeLayout = new javax.swing.GroupLayout(jpnlFlurstueckEingabe);
        jpnlFlurstueckEingabe.setLayout(jpnlFlurstueckEingabeLayout);
        jpnlFlurstueckEingabeLayout.setHorizontalGroup(
            jpnlFlurstueckEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlFlurstueckEingabeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlFlurstueckEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jfrmttxtfldFlurstueckzahler, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblFlurstuecknummer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jpnlFlurstueckEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jfrmttxtfldFlurstuecknenner, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jpnlFlurstueckEingabeLayout.setVerticalGroup(
            jpnlFlurstueckEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlFlurstueckEingabeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlFlurstueckEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblFlurstuecknummer)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlFlurstueckEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jfrmttxtfldFlurstueckzahler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jfrmttxtfldFlurstuecknenner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jtbdpnFlurKoord.addTab("Flurstücknummer", jpnlFlurstueckEingabe);

        jtxtfldNGrad.setColumns(3);
        jtxtfldNGrad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtfldNGradFocusGained(evt);
            }
        });
        jtxtfldNGrad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtfldNGradKeyPressed(evt);
            }
        });

        jlblN1.setText("°");

        jtxtfldNMinuten.setColumns(2);
        jtxtfldNMinuten.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtfldNMinutenFocusGained(evt);
            }
        });
        jtxtfldNMinuten.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtfldNMinutenKeyPressed(evt);
            }
        });

        jlblN2.setText("'");

        jtxtfldNSekunden.setColumns(5);
        jtxtfldNSekunden.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtfldNSekundenFocusGained(evt);
            }
        });
        jtxtfldNSekunden.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtfldNSekundenKeyPressed(evt);
            }
        });

        jlblN3.setText("'' N");

        jtxtfldEGrad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtfldEGradFocusGained(evt);
            }
        });
        jtxtfldEGrad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtfldEGradKeyPressed(evt);
            }
        });

        jlblE1.setText("°");

        jtxtfldEMinuten.setColumns(2);
        jtxtfldEMinuten.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtfldEMinutenFocusGained(evt);
            }
        });
        jtxtfldEMinuten.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtfldEMinutenKeyPressed(evt);
            }
        });

        jlblE2.setText("'");

        jtxtfldESekunden.setColumns(5);
        jtxtfldESekunden.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtfldESekundenFocusGained(evt);
            }
        });
        jtxtfldESekunden.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtfldESekundenKeyPressed(evt);
            }
        });

        jlblE3.setText("'' E");

        javax.swing.GroupLayout jpnlKoordinatenEingabeLayout = new javax.swing.GroupLayout(jpnlKoordinatenEingabe);
        jpnlKoordinatenEingabe.setLayout(jpnlKoordinatenEingabeLayout);
        jpnlKoordinatenEingabeLayout.setHorizontalGroup(
            jpnlKoordinatenEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlKoordinatenEingabeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlKoordinatenEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtxtfldEGrad, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtfldNGrad, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlKoordinatenEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblE1, javax.swing.GroupLayout.DEFAULT_SIZE, 13, Short.MAX_VALUE)
                    .addComponent(jlblN1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlKoordinatenEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpnlKoordinatenEingabeLayout.createSequentialGroup()
                        .addComponent(jtxtfldEMinuten, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlblE2, javax.swing.GroupLayout.DEFAULT_SIZE, 11, Short.MAX_VALUE))
                    .addGroup(jpnlKoordinatenEingabeLayout.createSequentialGroup()
                        .addComponent(jtxtfldNMinuten, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlblN2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlKoordinatenEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtxtfldNSekunden, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtfldESekunden, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlKoordinatenEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblN3)
                    .addComponent(jlblE3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(196, 196, 196))
        );
        jpnlKoordinatenEingabeLayout.setVerticalGroup(
            jpnlKoordinatenEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlKoordinatenEingabeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlKoordinatenEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtfldNGrad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblN1)
                    .addComponent(jlblN2)
                    .addComponent(jtxtfldNSekunden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblN3)
                    .addComponent(jtxtfldNMinuten, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpnlKoordinatenEingabeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtfldEGrad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblE1)
                    .addComponent(jlblE2)
                    .addComponent(jtxtfldESekunden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblE3)
                    .addComponent(jtxtfldEMinuten, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jtbdpnKoordinatenEingabe.addTab("Koordinaten", jpnlKoordinatenEingabe);

        jtxtfldUTMEasting.setColumns(12);
        jtxtfldUTMEasting.setToolTipText("~ 470 000 m");
        jtxtfldUTMEasting.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtfldUTMEastingFocusGained(evt);
            }
        });
        jtxtfldUTMEasting.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtfldUTMEastingKeyPressed(evt);
            }
        });

        jtxtfldUTMNorthing.setColumns(12);
        jtxtfldUTMNorthing.setToolTipText("~ 5 340 000 m");
        jtxtfldUTMNorthing.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtfldUTMNorthingFocusGained(evt);
            }
        });
        jtxtfldUTMNorthing.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtfldUTMNorthingKeyPressed(evt);
            }
        });

        jlblUTMEasting.setText("Easting");
        jlblUTMEasting.setToolTipText("~ 470 000 m");

        jlblUTMNorthing.setText("Northing");
        jlblUTMNorthing.setToolTipText("~ 5 340 000 m");

        javax.swing.GroupLayout jpnlETRS89_UTMLayout = new javax.swing.GroupLayout(jpnlETRS89_UTM);
        jpnlETRS89_UTM.setLayout(jpnlETRS89_UTMLayout);
        jpnlETRS89_UTMLayout.setHorizontalGroup(
            jpnlETRS89_UTMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlETRS89_UTMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlETRS89_UTMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtxtfldUTMEasting)
                    .addComponent(jtxtfldUTMNorthing, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpnlETRS89_UTMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlblUTMEasting, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jlblUTMNorthing, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        jpnlETRS89_UTMLayout.setVerticalGroup(
            jpnlETRS89_UTMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlETRS89_UTMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnlETRS89_UTMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtfldUTMEasting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblUTMEasting))
                .addGap(18, 18, 18)
                .addGroup(jpnlETRS89_UTMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtfldUTMNorthing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlblUTMNorthing))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jlblUTMEasting.getAccessibleContext().setAccessibleDescription("");

        jtbdpnKoordinatenEingabe.addTab("ETRS89/UTM", jpnlETRS89_UTM);

        jtbdpnFlurKoord.addTab("Koordinaten", jtbdpnKoordinatenEingabe);

        jlblGemeinde.setText("Gemeinde");

        jcmbbxGemeinde.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gemeindename" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlblGemeinde, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcmbbxGemeinde, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblGemeinde)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcmbbxGemeinde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jtbdpnFlurKoord)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbtnAbbrechen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnUebernehmen)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jtbdpnFlurKoord, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnUebernehmen)
                    .addComponent(jbtnAbbrechen))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Initialisiert die NumberFormatter für die verschiedenen Eingabefelder.
     * Dies stellt sicher, dass die Benutzereingaben korrekt formatiert und validiert werden.
     */
    private void init(){
        this.aAC = new ALKISApiClient("http://localhost:5260/api/Flurstueck"); // Initialisiert den ALKIS API Client
        
        // Formatter für ganze Zahlen (z.B. Flurstückzähler/nenner)
        NumberFormat format = NumberFormat.getIntegerInstance();
        format.setGroupingUsed(false); // Keine Tausenderpunkte verwenden

        NumberFormatter zaehlerFormatter = new NumberFormatter(format);
        zaehlerFormatter.setValueClass(Integer.class);
        zaehlerFormatter.setAllowsInvalid(false); // Ungültige Eingaben nicht zulassen
        zaehlerFormatter.setMinimum(1); // Nur positive Zahlen größer 0 zulassen
    }
    
    /**
     * Behandelt das ActionEvent des "Abbrechen"-Buttons.
     * Ruft die Methode {@code jbtnAbbrechenPressed()} auf.
     * @param evt Das ActionEvent.
     */
    private void jbtnAbbrechenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAbbrechenActionPerformed
        jbtnAbbrechenPressed();
    }//GEN-LAST:event_jbtnAbbrechenActionPerformed

    /**
     * Behandelt das ActionEvent des "Übernehmen"-Buttons.
     * Ruft die Methode {@code jbtnUebernehmenPressed()} auf.
     * @param evt Das ActionEvent.
     */
    private void jbtnUebernehmenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUebernehmenActionPerformed
        jbtnUebernehmenPressed();
    }//GEN-LAST:event_jbtnUebernehmenActionPerformed

    /**
     * Wählt den gesamten Text im Feld für Nord-Grad aus, wenn es den Fokus erhält.
     * @param evt Das FocusEvent.
     */
    private void jtxtfldNGradFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtfldNGradFocusGained
        jtxtfldNGrad.selectAll();
    }//GEN-LAST:event_jtxtfldNGradFocusGained

    /**
     * Wählt den gesamten Text im Feld für Nord-Minuten aus, wenn es den Fokus erhält.
     * @param evt Das FocusEvent.
     */
    private void jtxtfldNMinutenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtfldNMinutenFocusGained
        jtxtfldNMinuten.selectAll();
    }//GEN-LAST:event_jtxtfldNMinutenFocusGained

    /**
     * Wählt den gesamten Text im Feld für Nord-Sekunden aus, wenn es den Fokus erhält.
     * @param evt Das FocusEvent.
     */
    private void jtxtfldNSekundenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtfldNSekundenFocusGained
        jtxtfldNSekunden.selectAll();
    }//GEN-LAST:event_jtxtfldNSekundenFocusGained

    /**
     * Wählt den gesamten Text im Feld für Ost-Grad aus, wenn es den Fokus erhält.
     * @param evt Das FocusEvent.
     */
    private void jtxtfldEGradFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtfldEGradFocusGained
        jtxtfldEGrad.selectAll();
    }//GEN-LAST:event_jtxtfldEGradFocusGained

    /**
     * Wählt den gesamten Text im Feld für Ost-Minuten aus, wenn es den Fokus erhält.
     * @param evt Das FocusEvent.
     */
    private void jtxtfldEMinutenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtfldEMinutenFocusGained
        jtxtfldEMinuten.selectAll();
    }//GEN-LAST:event_jtxtfldEMinutenFocusGained

    /**
     * Wählt den gesamten Text im Feld für Ost-Sekunden aus, wenn es den Fokus erhält.
     * @param evt Das FocusEvent.
     */
    private void jtxtfldESekundenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtfldESekundenFocusGained
        jtxtfldESekunden.selectAll();
    }//GEN-LAST:event_jtxtfldESekundenFocusGained

    /**
     * Wählt den gesamten Text im Feld für UTM-Easting aus, wenn es den Fokus erhält.
     * @param evt Das FocusEvent.
     */
    private void jtxtfldUTMEastingFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtfldUTMEastingFocusGained
        jtxtfldUTMEasting.selectAll();
    }//GEN-LAST:event_jtxtfldUTMEastingFocusGained

    /**
     * Wählt den gesamten Text im Feld für UTM-Northing aus, wenn es den Fokus erhält.
     * @param evt Das FocusEvent.
     */
    private void jtxtfldUTMNorthingFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtfldUTMNorthingFocusGained
        jtxtfldUTMNorthing.selectAll();
    }//GEN-LAST:event_jtxtfldUTMNorthingFocusGained

    /**
     * Behandelt den Tastendruck im Feld für Nord-Grad.
     * Bei "Enter" wird der Fokus auf das Feld für Nord-Minuten verschoben.
     * @param evt Das KeyEvent.
     */
    private void jtxtfldNGradKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtfldNGradKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jtxtfldNMinuten.grabFocus();
        }
    }//GEN-LAST:event_jtxtfldNGradKeyPressed

    /**
     * Behandelt den Tastendruck im Feld für Nord-Minuten.
     * Bei "Enter" wird der Fokus auf das Feld für Nord-Sekunden verschoben.
     * @param evt Das KeyEvent.
     */
    private void jtxtfldNMinutenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtfldNMinutenKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jtxtfldNSekunden.grabFocus();
        }
    }//GEN-LAST:event_jtxtfldNMinutenKeyPressed

    /**
     * Behandelt den Tastendruck im Feld für Nord-Sekunden.
     * Bei "Enter" wird der Fokus auf das Feld für Ost-Grad verschoben.
     * @param evt Das KeyEvent.
     */
    private void jtxtfldNSekundenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtfldNSekundenKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jtxtfldEGrad.grabFocus();
        }
    }//GEN-LAST:event_jtxtfldNSekundenKeyPressed

    /**
     * Behandelt den Tastendruck im Feld für Ost-Grad.
     * Bei "Enter" wird der Fokus auf das Feld für Ost-Minuten verschoben.
     * @param evt Das KeyEvent.
     */
    private void jtxtfldEGradKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtfldEGradKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jtxtfldEMinuten.grabFocus();
        }
    }//GEN-LAST:event_jtxtfldEGradKeyPressed

    /**
     * Behandelt den Tastendruck im Feld für Ost-Minuten.
     * Bei "Enter" wird der Fokus auf das Feld für Ost-Sekunden verschoben.
     * @param evt Das KeyEvent.
     */
    private void jtxtfldEMinutenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtfldEMinutenKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jtxtfldESekunden.grabFocus();
        }
    }//GEN-LAST:event_jtxtfldEMinutenKeyPressed

    /**
     * Behandelt den Tastendruck im Feld für Ost-Sekunden.
     * Bei "Enter" wird der Fokus auf den "Übernehmen"-Button verschoben.
     * @param evt Das KeyEvent.
     */
    private void jtxtfldESekundenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtfldESekundenKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jbtnUebernehmen.grabFocus();
        }
    }//GEN-LAST:event_jtxtfldESekundenKeyPressed

    /**
     * Behandelt den Tastendruck im Feld für UTM-Easting.
     * Bei "Enter" wird der Fokus auf das Feld für UTM-Northing verschoben.
     * @param evt Das KeyEvent.
     */
    private void jtxtfldUTMEastingKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtfldUTMEastingKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jtxtfldUTMNorthing.grabFocus();
        }
    }//GEN-LAST:event_jtxtfldUTMEastingKeyPressed

    /**
     * Behandelt den Tastendruck im Feld für UTM-Northing.
     * Bei "Enter" wird der Fokus auf den "Übernehmen"-Button verschoben.
     * @param evt Das KeyEvent.
     */
    private void jtxtfldUTMNorthingKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtfldUTMNorthingKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jbtnUebernehmen.grabFocus();
        }
    }//GEN-LAST:event_jtxtfldUTMNorthingKeyPressed

    /**
     * Behandelt den Tastendruck auf dem "Abbrechen"-Button.
     * Bei "Enter" wird die Methode zum Abbrechen des Dialogs aufgerufen.
     * @param evt Das KeyEvent.
     */
    private void jbtnAbbrechenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnAbbrechenKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jbtnAbbrechenPressed();
        }
    }//GEN-LAST:event_jbtnAbbrechenKeyPressed

    /**
     * Behandelt den Tastendruck auf dem "Übernehmen"-Button.
     * Bei "Enter" wird die Methode zum Übernehmen der Eingabe aufgerufen.
     * @param evt Das KeyEvent.
     */
    private void jbtnUebernehmenKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jbtnUebernehmenKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jbtnUebernehmenPressed();
        }
    }//GEN-LAST:event_jbtnUebernehmenKeyPressed

    /**
     * Behandelt den Tastendruck im Feld für den Flurstückzähler.
     * Bei "Enter" wird der Fokus auf das Feld für den Flurstücksnenner verschoben.
     * @param evt Das KeyEvent.
     */
    private void jfrmttxtfldFlurstueckzahlerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jfrmttxtfldFlurstueckzahlerKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jfrmttxtfldFlurstuecknenner.grabFocus();
        }
    }//GEN-LAST:event_jfrmttxtfldFlurstueckzahlerKeyPressed

    /**
     * Behandelt den Tastendruck im Feld für den Flurstücksnenner.
     * Bei "Enter" wird der Fokus auf den "Übernehmen"-Button verschoben.
     * @param evt Das KeyEvent.
     */
    private void jfrmttxtfldFlurstuecknennerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jfrmttxtfldFlurstuecknennerKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jbtnUebernehmen.grabFocus();
        }
    }//GEN-LAST:event_jfrmttxtfldFlurstuecknennerKeyPressed

    /**
     * Hauptmethode zum Starten der Anwendung.
     * Erstellt und zeigt das FlurstückEingabeGUI-Fenster an.
     *
     * @param args Die Kommandozeilenargumente (nicht verwendet).
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlurstueckEingabeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlurstueckEingabeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlurstueckEingabeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlurstueckEingabeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlurstueckEingabeGUI().setVisible(true);
            }
        });
    }
    
    /**
     * Schließt das aktuelle Fenster.
     */
    private void jbtnAbbrechenPressed(){
        this.dispose();
    }
    
    /**
     * Verarbeitet die Benutzereingaben und ruft die ALKIS-API auf, um die Flurstücksdaten abzurufen.
     * Aktualisiert das {@code AgriPVData}-Objekt mit den abgerufenen Informationen
     * und benachrichtigt die {@code KonfigurationGUI} über die Auswahl des Flurstücks.
     */
    private void jbtnUebernehmenPressed(){
        try {
            String testjson;
            // Prüft, welcher Tab ausgewählt ist (Flurstücknummer oder Koordinaten)
            if(jtbdpnFlurKoord.getSelectedIndex()==0){ // Flurstücknummer-Tab
                // Ruft die API mit Zähler, Nenner und ausgewählter Gemarkung auf
                testjson = aAC.getByCounterNominator(jfrmttxtfldFlurstueckzahler.getText(), jfrmttxtfldFlurstuecknenner.getText(), jcmbbxGemeinde.getSelectedItem().toString());
            
            }else if(jtbdpnKoordinatenEingabe.getSelectedIndex()==0){ // Koordinaten-Tab (Grad/Min/Sek)
                // Konvertiert Grad/Min/Sek in Dezimalgrad und ruft die API auf
                double latitude = data.dmsToDecimal(Integer.parseInt(jtxtfldNGrad.getText().strip()), Integer.parseInt(jtxtfldNMinuten.getText().strip()), Double.parseDouble(jtxtfldNSekunden.getText().strip()));
                double longitude = data.dmsToDecimal(Integer.parseInt(jtxtfldEGrad.getText().strip()), Integer.parseInt(jtxtfldEMinuten.getText().strip()), Double.parseDouble(jtxtfldESekunden.getText().strip()));
                testjson = aAC.getByCoordinate(latitude, longitude, jcmbbxGemeinde.getSelectedItem().toString());
            
            } else { // ETRS89/UTM-Tab (Nicht implementiert)
                System.out.println("Die Eingabe über ETRS89/UTM-Koordinaten ist noch nicht implementiert.");
                // Platzhalter-JSON für nicht implementierte Methode (sollte durch echten API-Aufruf ersetzt werden)
                testjson = "{\"dateiname\":\"ALKIS-oE_089890_Friedrichshafen_nas.xml\",\"zaehler\":\"645\",\"nenner\":\"0\",\"wkt\":\"POLYGON ((534834.79 5278394.42, 534835.178 5278391.123, 534835.84 5278387.87, 534835.84 5278387.87, 534854.57 5278399.42, 534854.57 5278399.42, 534877.57 5278362.08, 534877.57 5278362.08, 534866.08 5278355, 534866.08 5278355, 534873.08 5278343.63, 534873.08 5278343.63, 534863.86 5278339.77, 534863.86 5278339.77, 534874.62 5278323.3, 534874.62 5278323.3, 534879.31 5278325.77, 534879.31 5278325.77, 534887.8 5278329.36, 534887.8 5278329.36, 534898.08 5278332.08, 534898.08 5278332.08, 534913.48 5278335.35, 534913.48 5278335.35, 534930.62 5278337.92, 534930.62 5278337.92, 534955.28 5278340.05, 534955.28 5278340.05, 534953.43 5278307.8, 534953.43 5278307.8, 534956 5278277.78, 534956 5278277.78, 534957.02 5278267.65, 534957.02 5278267.65, 534957.08 5278267.04, 534957.08 5278267.04, 534966.49 5278267.67, 534966.49 5278267.67, 534976.5 5278267.98, 534976.5 5278267.98, 534986.48 5278267.99, 534986.48 5278267.99, 534996.48 5278267.89, 534996.48 5278267.89, 535006.48 5278267.63, 535006.48 5278267.63, 535016.46 5278267.17, 535016.46 5278267.17, 535026.43 5278266.57, 535026.43 5278266.57, 535300.45 5278245.35, 535300.45 5278245.35, 535364.87 5278240.35, 535364.87 5278240.35, 535371.75 5278240.11, 535371.75 5278240.11, 535374.44 5278240.11, 535374.44 5278240.11, 535383.18 5278240.7, 535383.18 5278240.7, 535389.693 5278241.806, 535396.11 5278243.38, 535396.11 5278243.38, 535398.442 5278244.484, 535400.62 5278245.87, 535400.62 5278245.87, 535409.833 5278249.559, 535418.53 5278254.34, 535418.53 5278254.34, 535423.505 5278257.73, 535428.24 5278261.45, 535428.24 5278261.45, 535434.072 5278266.82, 535439.55 5278272.55, 535439.55 5278272.55, 535449.84 5278283.67, 535449.84 5278283.67, 535461.62 5278296.24, 535461.62 5278296.24, 535466.05 5278301.84, 535466.05 5278301.84, 535473.25 5278311.08, 535473.25 5278311.08, 535474.71 5278313.1, 535474.71 5278313.1, 535526.89 5278385.49, 535526.89 5278385.49, 535483.46 5278418.61, 535483.46 5278418.61, 535481.65 5278416.22, 535481.65 5278416.22, 535457.81 5278434.41, 535457.81 5278434.41, 535421.24 5278462.3, 535421.24 5278462.3, 535461.73 5278515.5, 535461.73 5278515.5, 535462.883 5278518.222, 535462.57 5278521.16, 535462.57 5278521.16, 535431.58 5278537.07, 535431.58 5278537.07, 535421.089 5278523.079, 535409.27 5278510.19, 535409.27 5278510.19, 535397.638 5278499.491, 535385.1 5278489.87, 535385.1 5278489.87, 535379.349 5278486.173, 535373.46 5278482.7, 535373.46 5278482.7, 535349.784 5278471.166, 535324.66 5278463.27, 535324.66 5278463.27, 534843.09 5278500.87, 534843.09 5278500.87, 534842.61 5278480.08, 534842.61 5278480.08, 534841.05 5278413.16, 534841.05 5278413.16, 534837.61 5278412.41, 534837.61 5278412.41, 534835.155 5278403.578, 534834.79 5278394.42))\",\"amtlicheFlaeche\":134949}";
            }
            
            // Parsen der JSON-Antwort
            JSONObject gesamtJSON = new JSONObject(testjson);
            
            // Extrahieren der Flurstücksdaten aus dem JSON und Speichern in data
            String[] gmn = gesamtJSON.getString("dateiname").split("_");
            data.gemeindename = gmn[2] + ((gmn.length > 4) ? gmn[3] : ""); // Setzt den Gemeindenamen
            data.flurstueckszaehler = gesamtJSON.getInt("zaehler"); // Setzt den Flurstückzähler
            data.flurstuecksnenner = gesamtJSON.getInt("nenner"); // Setzt den Flurstücksnenner
            data.amtFlaeche = gesamtJSON.getInt("amtlicheFlaeche"); // Setzt die amtliche Fläche

            JSONArray koordinatenJSON;
            // Prüft, ob Koordinaten als Array oder als WKT-String vorliegen
            if (gesamtJSON.isNull("koordinaten")){                
                String tmp = gesamtJSON.getString("wkt");
                // Konvertiert WKT-String in ein JSON-Array-Format, das geparst werden kann
                tmp = tmp.replace("POLYGON ((", "{\"koordinaten\":[").replace("))", "]}").replaceAll("(\\d+(?:\\.\\d+)?)\\s+(\\d+(?:\\.\\d+)?)", "[$1,$2]").replaceAll("\\s+", "");
                JSONObject tmpJSON = new JSONObject(tmp);
                koordinatenJSON = tmpJSON.getJSONArray("koordinaten");
            } else {
                koordinatenJSON = gesamtJSON.getJSONArray("koordinaten");
            }
            data.points = koordinatenJSON.length(); // Anzahl der Koordinatenpunkte
            
            data.grundstuecksgrenze = new double[2][data.points]; // Initialisiert das Array für die Grundstücksgrenze
            data.mine = Double.MAX_VALUE; // Initialisiert min/max Werte für die Bounding Box
            data.minn = Double.MAX_VALUE;
            data.maxe = Double.MIN_VALUE;
            data.maxn = Double.MIN_VALUE;
            
            ArrayList<Coordinate> tmpList = new ArrayList<>(); // Temporäre Liste für JTS-Koordinaten
            
            // Iteriert durch die Koordinatenpunkte, speichert sie und aktualisiert die Bounding Box
            for (int i = 0; i < data.points; i++) {
                JSONArray punkte = koordinatenJSON.getJSONArray(i);
                double tmpX = Double.parseDouble(punkte.get(0).toString());
                double tmpY = Double.parseDouble(punkte.get(1).toString());
                data.grundstuecksgrenze[0][i] = tmpX; // Ost-Koordinate
                data.grundstuecksgrenze[1][i] = tmpY; // Nord-Koordinate
                
                tmpList.add(new Coordinate(tmpX, tmpY)); // Fügt JTS-Koordinate hinzu
                
                // Aktualisiert die minimale und maximale Ost/Nord-Koordinate (Bounding Box)
                if(data.grundstuecksgrenze[0][i] < data.mine){
                    data.mine = data.grundstuecksgrenze[0][i];
                }
                if(data.grundstuecksgrenze[1][i] < data.minn){
                    data.minn = data.grundstuecksgrenze[1][i];
                }
                if(data.grundstuecksgrenze[0][i] > data.maxe){
                    data.maxe = data.grundstuecksgrenze[0][i];
                }
                if(data.grundstuecksgrenze[1][i] > data.maxn){
                    data.maxn = data.grundstuecksgrenze[1][i];
                }
            }
            
            // Erstellt das JTS-Polygon für das Grundstück
            data.plotPolygon = createPolygon(tmpList);
            
            // Benachrichtigt die KonfigurationGUI, dass ein Flurstück ausgewählt wurde
            kGUI.flurstuckAusgewahlt();
            
            this.dispose(); // Schließt das aktuelle Fenster
        }catch(Exception e){
            e.printStackTrace(); // Gibt Fehlermeldungen aus
            this.dispose(); // Schließt das Fenster auch bei Fehlern
        }        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbtnAbbrechen;
    private javax.swing.JButton jbtnUebernehmen;
    private javax.swing.JComboBox<String> jcmbbxGemeinde;
    private javax.swing.JFormattedTextField jfrmttxtfldFlurstuecknenner;
    private javax.swing.JFormattedTextField jfrmttxtfldFlurstueckzahler;
    private javax.swing.JLabel jlblE1;
    private javax.swing.JLabel jlblE2;
    private javax.swing.JLabel jlblE3;
    private javax.swing.JLabel jlblFlurstuecknummer;
    private javax.swing.JLabel jlblGemeinde;
    private javax.swing.JLabel jlblN1;
    private javax.swing.JLabel jlblN2;
    private javax.swing.JLabel jlblN3;
    private javax.swing.JLabel jlblUTMEasting;
    private javax.swing.JLabel jlblUTMNorthing;
    private javax.swing.JPanel jpnlETRS89_UTM;
    private javax.swing.JPanel jpnlFlurstueckEingabe;
    private javax.swing.JPanel jpnlKoordinatenEingabe;
    private javax.swing.JTabbedPane jtbdpnFlurKoord;
    private javax.swing.JTabbedPane jtbdpnKoordinatenEingabe;
    private javax.swing.JTextField jtxtfldEGrad;
    private javax.swing.JTextField jtxtfldEMinuten;
    private javax.swing.JTextField jtxtfldESekunden;
    private javax.swing.JTextField jtxtfldNGrad;
    private javax.swing.JTextField jtxtfldNMinuten;
    private javax.swing.JTextField jtxtfldNSekunden;
    private javax.swing.JTextField jtxtfldUTMEasting;
    private javax.swing.JTextField jtxtfldUTMNorthing;
    // End of variables declaration//GEN-END:variables

    /**
     * Erstellt ein JTS (Java Topology Suite) Polygon aus einer Liste von Koordinaten.
     * Stellt sicher, dass das Polygon geschlossen ist (erster und letzter Punkt sind identisch).
     *
     * @param coordinates Eine ArrayList von {@code Coordinate}-Objekten, die die Eckpunkte des Polygons bilden.
     * @return Ein {@code Polygon}-Objekt, das aus den gegebenen Koordinaten erstellt wurde.
     */
    public static Polygon createPolygon(ArrayList<Coordinate> coordinates) {
        GeometryFactory geometryFactory = new GeometryFactory();

        // Stelle sicher, dass das Polygon geschlossen ist (erster Punkt muss dem letzten entsprechen)
        if (!coordinates.get(0).equals2D(coordinates.get(coordinates.size() - 1))) {
            coordinates.add(coordinates.get(0));
        }

        // Konvertiere die ArrayList in ein Array von Koordinaten
        Coordinate[] coordArray = coordinates.toArray(new Coordinate[0]);
        // Erstelle einen LinearRing aus den Koordinaten (äußerer Ring des Polygons)
        LinearRing shell = geometryFactory.createLinearRing(coordArray);
        // Erstelle das Polygon aus dem LinearRing
        return geometryFactory.createPolygon(shell);
    }
    
    /**
     * Aktualisiert die Dropdown-Liste der Gemarkungen, indem sie Daten von der ALKIS-API abruft.
     * Bei erfolgreichem Login werden die Gemarkungen alphabetisch sortiert und in die ComboBox eingefügt.
     */
    private void updateMarkings(){
        try{
            // Versucht, sich bei der ALKIS-API anzumelden
            if (aAC.login("ALKIS", "ALKIS")) { // Standard-Benutzername und -Passwort für die API
                ArrayList<String> markings = aAC.getMarkings(); // Ruft die Liste der Gemarkungen ab
                Collections.sort(markings); // Sortiert die Gemarkungen alphabetisch
                jcmbbxGemeinde.removeAllItems(); // Entfernt bestehende Einträge in der ComboBox
                // Fügt alle abgerufenen Gemarkungen der ComboBox hinzu
                for(String tmp : markings){
                    jcmbbxGemeinde.addItem(tmp);
                }
            } else {
                System.out.println("Login nicht erfolgreich!"); // Fehlermeldung bei fehlgeschlagenem Login
            }
        } catch(org.apache.http.conn.HttpHostConnectException e) {
            // Ignoriert die Fehlermeldung, wenn keine Verbindung zum Host aufgebaut werden kann
            // Dies ist oft der Fall, wenn der lokale API-Server nicht läuft
            System.out.println("Fehler: Verbindung zur ALKIS-API konnte nicht hergestellt werden. Bitte stellen Sie sicher, dass der Server läuft.");
        } catch(Exception e){
            e.printStackTrace(); // Gibt andere unerwartete Fehler aus
        }        
    }
}
