/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package agri.pv_shadow_sim_java;

import java.awt.Color;
import org.locationtech.jts.geom.Geometry;

/**
 * Die Klasse {@code SimulationsGUI} repräsentiert das grafische Benutzerinterface
 * zur Anzeige der Simulationsergebnisse, insbesondere der platzierten PV-Module
 * und der Verschattung auf dem Flurstück. Es verwendet ein {@code GeometryPanel},
 * um die Geometrien zu zeichnen.
 *
 * @author roesc
 */
public class SimulationsGUI extends javax.swing.JFrame {

    private AgriPVData data; // Das Datenobjekt, das die Simulationsergebnisse enthält
    
    /**
     * Erstellt ein neues Formular SimulationsGUI.
     * Initialisiert die GUI-Komponenten.
     */
    public SimulationsGUI() {
        initComponents(); // Initialisiert die Swing-Komponenten
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpnlAnzeige = new GeometryPanel();

        setTitle("Simulationsergebnis");

        javax.swing.GroupLayout jpnlAnzeigeLayout = new javax.swing.GroupLayout(jpnlAnzeige);
        jpnlAnzeige.setLayout(jpnlAnzeigeLayout);
        jpnlAnzeigeLayout.setHorizontalGroup(
            jpnlAnzeigeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
        );
        jpnlAnzeigeLayout.setVerticalGroup(
            jpnlAnzeigeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 720, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnlAnzeige, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnlAnzeige, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Hauptmethode zum Starten der Anwendung.
     * Erstellt und zeigt das SimulationsGUI-Fenster an.
     *
     * @param args Die Kommandozeilenargumente (nicht verwendet).
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulationsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulationsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulationsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulationsGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulationsGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jpnlAnzeige;
    // End of variables declaration//GEN-END:variables

    /**
     * Setzt das {@code AgriPVData}-Objekt für diese Simulations-GUI und übergibt es
     * an das zugrunde liegende {@code GeometryPanel}.
     *
     * @param data Das {@code AgriPVData}-Objekt, das die Simulationsdaten enthält.
     */
    public void setAgriPVData(AgriPVData data) {
        this.data = data;
        ((GeometryPanel)jpnlAnzeige).setAgriPVData(data); // Übergibt die Daten an das Zeichenpanel
    }
    
    /**
     * Fügt eine Geometrie (z.B. Grundstücksumriss oder PV-Modul) zum Zeichnen hinzu.
     * Diese Geometrien werden als Umrisse dargestellt.
     *
     * @param geometry Die JTS-Geometrie, die hinzugefügt werden soll.
     * @param color Die Farbe, in der die Geometrie gezeichnet werden soll.
     */
    protected void addGeometry(Geometry geometry, Color color) {
        ((GeometryPanel)jpnlAnzeige).addGeometry(geometry, color);
    }
    
    /**
     * Löscht alle derzeit auf dem Panel angezeigten Geometrien (Umrisse und gefüllte Flächen).
     */
    protected void clearAll(){
        ((GeometryPanel)jpnlAnzeige).clearAll();
    }
    
    /**
     * Gibt das {@code GeometryPanel} dieser Simulations-GUI zurück.
     * Dies ermöglicht externen Klassen den Zugriff auf Methoden zum Hinzufügen
     * und Verwalten von Geometrien zur Visualisierung.
     *
     * @return Das {@code GeometryPanel}-Objekt, das die Geometrien zeichnet.
     */
    public GeometryPanel getGeometryPanel() {
        return (GeometryPanel) jpnlAnzeige;
    }
    
    /**
     * Löscht nur die Geometrien, die für die Verschattungsanzeige (gefüllte Polygone)
     * verwendet werden. Andere Geometrien (wie Grundstücksumrisse und PV-Modul-Umrisse)
     * bleiben erhalten, um die Basiskarte nicht neu aufbauen zu müssen.
     */
    public void clearShadingGeometries() {
        ((GeometryPanel)jpnlAnzeige).clearShadingGeometries();
    }
}
